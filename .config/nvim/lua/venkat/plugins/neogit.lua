return {
    -- "NeogitOrg/neogit",
    -- dependencies = {
    --     "nvim-lua/plenary.nvim",
    --     "sindrets/diffview.nvim",
    --     "nvim-telescope/telescope.nvim",
    --     "ibhagwan/fzf-lua",
    --     "echasnovski/mini.pick",
    --     "isakbm/gitgraph.nvim",
    -- },
    -- config = function()
    --     local neogit = require("neogit")
    --     local keymap = vim.keymap
    --
    --     -- Set up highlight groups before initializing neogit
    --     local function setup_highlights()
    --         -- Ensure basic highlight groups exist
    --         vim.api.nvim_set_hl(0, "NeogitBranch", { link = "Special" })
    --         vim.api.nvim_set_hl(0, "NeogitRemote", { link = "Character" })
    --         vim.api.nvim_set_hl(0, "NeogitHunkHeader", { link = "Comment" })
    --         vim.api.nvim_set_hl(0, "NeogitHunkHeaderHighlight", { link = "Function" })
    --         vim.api.nvim_set_hl(0, "NeogitDiffAdd", { link = "DiffAdd" })
    --         vim.api.nvim_set_hl(0, "NeogitDiffDelete", { link = "DiffDelete" })
    --         vim.api.nvim_set_hl(0, "NeogitDiffContext", { link = "DiffText" })
    --     end
    --
    --     setup_highlights()
    --
    --     neogit.setup({
    --         -- Disable integrations initially to isolate the issue
    --         integrations = {
    --             diffview = false,  -- Try disabling first
    --             telescope = false, -- Try disabling first
    --             fzf_lua = false,   -- Try disabling first
    --         },
    --
    --         -- Simplify signs configuration to avoid potential nil values
    --         signs = {
    --             section = { "", "" }, -- Use simpler Unicode chars
    --             item = { "", "" },    -- Use simpler Unicode chars
    --             hunk = { "", "" },    -- Use simpler Unicode chars
    --         },
    --
    --         -- Minimal status configuration
    --         status = {
    --             show_head_commit_hash = true,
    --             recent_commit_count = 10,
    --             HEAD_padding = 10,
    --             mode_padding = 3, -- Reduce padding
    --             -- Simplify mode text
    --             mode_text = {
    --                 M = "M",
    --                 N = "N",
    --                 A = "A",
    --                 D = "D",
    --                 C = "C",
    --                 R = "R",
    --                 ["?"] = "?",
    --             },
    --         },
    --
    --         -- Disable line numbers for cleaner UI
    --         disable_line_numbers = true,
    --
    --         -- Simplify other configurations
    --         kind_width = 10, -- Reduce width
    --
    --         -- Keep your existing keymaps
    --         mappings = {
    --             status = {
    --                 ["<tab>"] = "Toggle",
    --                 ["<space>"] = "Stage",
    --                 ["s"] = "Stage",
    --                 ["u"] = "Unstage",
    --                 ["S"] = "StageAll",
    --             },
    --         },
    --     })
    --
    --     -- Toggle Neogit with leader key
    --     keymap.set("n", "<leader>go", function()
    --         local status, err = pcall(function()
    --             if neogit.status and neogit.status.buffer and neogit.status.buffer.handle then
    --                 neogit.close()
    --             else
    --                 neogit.open()
    --             end
    --         end)
    --
    --         if not status then
    --             -- Fallback to simple open/close
    --             vim.notify("Neogit error: " .. tostring(err), vim.log.levels.ERROR)
    --             neogit.open()
    --         end
    --     end, { silent = true, noremap = true })
    --
    --     -- Simplified Git command that avoids problematic API calls
    --     vim.api.nvim_create_user_command("Git", function(opts)
    --         local args = opts.args
    --
    --         -- If no arguments, open Neogit status
    --         if args == "" then
    --             local status, err = pcall(neogit.open)
    --             if not status then
    --                 vim.notify("Error opening Neogit: " .. tostring(err), vim.log.levels.ERROR)
    --             end
    --             return
    --         end
    --
    --         -- Parse the command and arguments
    --         local cmd_parts = vim.split(args, " ", { plain = true, trimempty = true })
    --         local subcmd = cmd_parts[1]
    --         table.remove(cmd_parts, 1)
    --         local remaining = table.concat(cmd_parts, " ")
    --
    --         -- For now, handle only basic commands to avoid API issues
    --         if subcmd == "add" then
    --             if remaining == "." then
    --                 vim.fn.system("git add .")
    --                 vim.notify("Staged all files", vim.log.levels.INFO)
    --             else
    --                 vim.fn.system("git add " .. remaining)
    --                 vim.notify("Staged: " .. remaining, vim.log.levels.INFO)
    --             end
    --         elseif subcmd == "commit" then
    --             -- Try to open commit popup, fallback to terminal
    --             local status, err = pcall(function()
    --                 neogit.open({ "commit" })
    --             end)
    --             if not status then
    --                 vim.cmd("terminal git commit")
    --             end
    --         else
    --             -- For other commands, pass through to git CLI
    --             local output = vim.fn.system("git " .. args)
    --             if vim.v.shell_error ~= 0 then
    --                 vim.api.nvim_err_writeln("Git error: " .. output)
    --             else
    --                 vim.api.nvim_echo({ { output, "Normal" } }, true, {})
    --             end
    --         end
    --     end, { nargs = "*", complete = "file" })
    --
    --     -- Set up autocmd for Neogit buffers with error handling
    --     vim.api.nvim_create_autocmd({ "FileType" }, {
    --         pattern = "NeogitStatus",
    --         callback = function()
    --             local status, err = pcall(function()
    --                 vim.opt_local.wrap = false
    --                 vim.opt_local.number = false
    --                 vim.opt_local.relativenumber = false
    --                 vim.opt_local.signcolumn = "no"
    --             end)
    --
    --             if not status then
    --                 vim.notify("Neogit autocmd error: " .. tostring(err), vim.log.levels.WARN)
    --             end
    --         end,
    --     })
    -- end,

    -- "NeogitOrg/neogit",
    -- dependencies = {
    --     "nvim-lua/plenary.nvim",
    --     "sindrets/diffview.nvim",
    --     "nvim-telescope/telescope.nvim",
    --     "ibhagwan/fzf-lua",
    --     "echasnovski/mini.pick",
    --     "isakbm/gitgraph.nvim",
    -- },
    "tpope/vim-fugitive"
}
